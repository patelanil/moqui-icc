<?xml version="1.0" encoding="UTF-8"?>

<services xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/service-definition-3.xsd">

    <service verb="login" noun="User">
        <in-parameters>
            <parameter name="username"/>
            <parameter name="password"/>
            <!-- Deprecated parameter: It is no longer necessary to call the login API to retrieve the Moqui API key using a JWT token.
                Maarg now supports application authentication using the JWT token generated by the OMS application. -->
            <parameter name="token"/>
        </in-parameters>
        <out-parameters>
            <parameter name="token"/>
            <parameter name="expirationTime" type="long"/>
            <parameter name="api_key"/>
        </out-parameters>
        <actions>
            <if condition="!token">
                <set field="token" from="ec.web.request.getHeader('token')"/>
            </if>
            <if condition="!(token || (username &amp;&amp; password))">
                <return error="true" message="Username and/or password missing"/>
            </if>
            <script><![CDATA[
                import co.hotwax.auth.JWTManager;
                try {
                    if (token) {
                        jwtClaims = JWTManager.validateToken(token, ec);
                        if (jwtClaims != null && jwtClaims.userLoginId) {
                            loggedIn = ec.user.internalLoginUser(jwtClaims.userLoginId, false)
                        }
                    } else {
                        loggedIn = ec.user.loginUser(username, password)
                    }
                    if (loggedIn) {
                        int defaultExpireTime = Integer.valueOf(System.getProperty("jwt.default.expireTime")?:"300");
                        Calendar cal = Calendar.getInstance();
                        cal.setTimeInMillis(ec.user.nowTimestamp.getTime());
                        cal.add(Calendar.SECOND, defaultExpireTime);

                        token = JWTManager.createJwt(ec, ['userLoginId': userLoginId], null, cal.getTime())
                        api_key = ec.user.getLoginKey()
                        expirationTime = cal.getTimeInMillis();

                        return;
                    } else if (ec.message.hasError()) {
                        ec.logger.error("User login error : " + ec.message.getErrorsString())
                        ec.message.clearErrors()
                    }
                }   catch (Exception e) {
                    ec.logger.warn(e.getMessage())
                }
            ]]></script>
            <return error="true" message="Sorry, your username and/or password are incorrect - please try again." />
        </actions>
    </service>
    <service verb="get" noun="UserProfile">
        <out-parameters>
            <parameter name="userId"/>
            <parameter name="username"/>
            <parameter name="userFullName"/>
            <parameter name="timeZone"/>
            <parameter name="locale"/>
            <parameter name="emailAddress"/>
            <parameter name="preferences" type="Map">
                <auto-parameters entity-name="moqui.security.UserPreference"/>
            </parameter>
            <parameter name="partyId"/>
        </out-parameters>
        <actions>
            <set field="userId" from="ec.user.UserAccount.userId"/>
            <set field="username" from="ec.user.UserAccount.username"/>
            <set field="userFullName" from="ec.user.UserAccount.userFullName"/>
            <set field="timeZone" from="ec.user.getTimeZone()"/>
            <set field="locale" from="ec.user.getLocale()"/>
            <set field="emailAddress" from="ec.user.UserAccount.emailAddress"/>
            <set field="preferences" from="ec.user.UserAccount.preferences"/>
            <entity-find-one entity-name="org.apache.ofbiz.security.login.UserLogin" value-field="omsUserLogin">
                <field-map field-name="userLoginId" from="username"/>
            </entity-find-one>
            <if condition="omsUserLogin">
                <set field="partyId" from="omsUserLogin.partyId"/>
            </if>
        </actions>
    </service>
    <service verb="increment" noun="UserLoginFailedLogins" authenticate="anonymous-all" allow-remote="false">
        <in-parameters><parameter name="userId" required="true"/></in-parameters>
        <actions>
            <entity-find-one entity-name="org.apache.ofbiz.security.login.UserLogin" value-field="userLogin">
                <field-map field-name="userLoginId" from="userId"/>
            </entity-find-one>
            <set field="userLogin.successiveFailedLogins"
                 from="userLogin.successiveFailedLogins ? userLogin.successiveFailedLogins + 1 : 1"/>
            <set field="maxFailures" from="(ec.ecfi.confXmlRoot.first('user-facade').first('login').attribute('max-failures') ?: 10) as Integer"/>
            <!-- if successiveFailedLogins is greater than max in conf then disable account -->
            <if condition="userLogin.successiveFailedLogins > maxFailures &amp;&amp; userLogin.enabled != 'N'">
                <set field="userLogin.enabled" value="N"/>
                <set field="userLogin.disabledDateTime" from="ec.user.nowTimestamp"/>
            </if>
            <log level="warn" message="User ${userId} failed logins [${userLogin.successiveFailedLogins}], maxFailures [${maxFailures}], disabled [${userLogin.enabled}]"/>
            <entity-update value-field="userLogin"/>
        </actions>
    </service>
</services>